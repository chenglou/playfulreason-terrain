// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var $$Array    = require("bs-platform/lib/js/array.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function make(n) {
  return /* record */[
          /* n */n,
          /* size */Caml_int32.imul(n, n),
          /* map */Caml_array.caml_make_vect(Caml_int32.imul(n, n), 0)
        ];
}

function size(m) {
  return m[/* n */0];
}

function get(m, x, y) {
  if (x < 0 || x >= m[/* n */0] || y < 0 || y >= m[/* n */0]) {
    return /* None */0;
  } else {
    return /* Some */[Caml_array.caml_array_get(m[/* map */2], x + Caml_int32.imul(m[/* n */0], y) | 0)];
  }
}

function set(m, x, y, v) {
  if (x < 0 || x >= m[/* n */0] || y < 0 || y >= m[/* n */0]) {
    return /* () */0;
  } else {
    return Caml_array.caml_array_set(m[/* map */2], x + Caml_int32.imul(m[/* n */0], y) | 0, v);
  }
}

function iter(m, f) {
  return $$Array.iteri((function (i, v) {
                var y = Caml_int32.div(i, m[/* n */0]);
                var x = i - Caml_int32.imul(y, m[/* n */0]) | 0;
                return Curry._3(f, x, y, v);
              }), m[/* map */2]);
}

exports.make = make;
exports.size = size;
exports.get  = get;
exports.set  = set;
exports.iter = iter;
/* No side effect */
