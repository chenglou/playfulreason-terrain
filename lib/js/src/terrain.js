// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function create(detail) {
  var size = Math.pow(2, detail) + 1 | 0;
  var max = size - 1 | 0;
  var map = new Float32Array(Caml_array.caml_make_vect(Caml_int32.imul(size, size), 0));
  return /* record */[
          /* size */size,
          /* max */max,
          /* map */map
        ];
}

function getIndex(terrain, x, y) {
  return x + Caml_int32.imul(terrain[/* size */0], y) | 0;
}

function getCoord(terrain, i) {
  var y = Caml_int32.div(i, terrain[/* size */0]);
  var x = i - Caml_int32.imul(y, terrain[/* size */0]) | 0;
  return /* :: */[
          x,
          /* :: */[
            y,
            /* [] */0
          ]
        ];
}

function get(terrain, x, y) {
  if (x < 0 || x > terrain[/* max */1] || y < 0 || y > terrain[/* max */1]) {
    return -1;
  } else {
    return terrain[/* map */2][getIndex(terrain, x, y)];
  }
}

function set(terrain, x, y, v) {
  terrain[/* map */2][getIndex(terrain, x, y)] = v;
  return /* () */0;
}

function generate(terrain, roughness) {
  var max = terrain[/* max */1];
  var average = function (values) {
    var valid = values.filter(function (x) {
          return +(x !== -1);
        });
    var total = valid.reduce(function (prim, prim$1) {
          return prim + prim$1;
        }, 0);
    var len = values.length;
    return total / len;
  };
  var square = function (x, y, size, offset) {
    var avg = average(/* float array */[
          get(terrain, x - size | 0, y - size | 0),
          get(terrain, x + size | 0, y - size | 0),
          get(terrain, x + size | 0, y + size | 0),
          get(terrain, x - size | 0, y + size | 0)
        ]);
    return set(terrain, x, y, avg + offset);
  };
  var diamond = function (x, y, size, offset) {
    var avg = average(/* float array */[
          get(terrain, x, y - size | 0),
          get(terrain, x + size | 0, y),
          get(terrain, x, y + size | 0),
          get(terrain, x - size | 0, y)
        ]);
    return set(terrain, x, y, avg + offset);
  };
  set(terrain, 0, 0, max);
  set(terrain, max, 0, max / 2);
  set(terrain, max, max, 0);
  set(terrain, 0, max, max / 2);
  var _size = max;
  while(true) {
    var size = _size;
    var half = size / 2 | 0;
    var scale = size * roughness;
    if (half >= 1) {
      var maxValue = Caml_int32.div(max - half | 0, size);
      for(var y = 0; y <= maxValue; ++y){
        for(var x = 0; x <= maxValue; ++x){
          var x0 = half + Caml_int32.imul(x, size) | 0;
          var y0 = half + Caml_int32.imul(y, size) | 0;
          square(x0, y0, half, Math.random() * scale * 2 - scale);
        }
      }
      for(var y$1 = 0 ,y_finish = Caml_int32.div(max, half); y$1 <= y_finish; ++y$1){
        var y0$1 = Caml_int32.imul(y$1, half);
        var xStart = Caml_int32.mod_(y0$1 + half | 0, size);
        var xEnd = Caml_int32.div(max - xStart | 0, size);
        for(var x$1 = xStart; x$1 <= xEnd; ++x$1){
          var x0$1 = xStart + Caml_int32.imul(x$1 - xStart | 0, size) | 0;
          diamond(x0$1, y0$1, half, Math.random() * scale * 2 - scale);
        }
      }
      _size = size / 2 | 0;
      continue ;
      
    } else {
      return 0;
    }
  };
}

function draw(terrain, context, width, height) {
  var waterVal = terrain[/* size */0] * 0.3;
  var max = terrain[/* max */1];
  var size = terrain[/* size */0];
  var rect = function (context, a, b, style) {
    if (b[/* y */1] >= a[/* y */1]) {
      context.fillStyle = style;
      context.fillRect(a[/* x */0], a[/* y */1], b[/* x */0] - a[/* x */0], b[/* y */1] - a[/* y */1]);
      return /* () */0;
    } else {
      return 0;
    }
  };
  var brightness = function (x, y, _) {
    if (y === max || x === max) {
      return "#000";
    } else {
      return "rgb(128,128,128)";
    }
  };
  var iso = function (x, y) {
    return /* float array */[
            0.5 * ((size + x | 0) - y | 0),
            0.5 * (x + y | 0)
          ];
  };
  var project = function (flatX, flatY, flatZ) {
    var point = iso(flatX, flatY);
    var x0 = width * 0.5;
    var y0 = height * 0.2;
    var z = size * 0.5 - flatZ + point[/* y */1] * 0.75;
    var x = (point[/* x */0] - size * 0.5) * 6;
    var y = (size - point[/* y */1]) * 0.005 + 1;
    return /* float array */[
            x0 + x / y,
            y0 + z / y
          ];
  };
  for(var y = 0; y <= size; ++y){
    for(var x = 0; x <= size; ++x){
      var v = get(terrain, x, y);
      var top = project(x, y, v);
      var bottom = project(x + 1 | 0, y, 0);
      var water = project(x, y, waterVal);
      var style = brightness(x, y, get(terrain, x + 1 | 0, y) - v);
      rect(context, top, bottom, style);
      rect(context, water, bottom, "rgba(50, 150, 200, 0.01)");
    }
  }
  return /* () */0;
}

exports.create   = create;
exports.getIndex = getIndex;
exports.getCoord = getCoord;
exports.get      = get;
exports.set      = set;
exports.generate = generate;
exports.draw     = draw;
/* No side effect */
