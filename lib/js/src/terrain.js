// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var Option   = require("./option.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var PointMap = require("./pointMap.js");

function create(detail) {
  var size = Math.pow(2, detail) + 1 | 0;
  var max = size - 1 | 0;
  var map = PointMap.make(size);
  return /* record */[
          /* detail */detail,
          /* size */size,
          /* max */max,
          /* map */map
        ];
}

function needsSquare(x, y) {
  if (x % 2 === 1) {
    return +(y % 2 === 1);
  } else {
    return /* false */0;
  }
}

function needsDiamond(x, y) {
  return Caml_obj.caml_notequal(+(x % 2 === 1), +(y % 2 === 1));
}

function getSquare(m, x, y) {
  return /* array */[
          PointMap.get(m, x - 1 | 0, y - 1 | 0),
          PointMap.get(m, x + 1 | 0, y - 1 | 0),
          PointMap.get(m, x + 1 | 0, y + 1 | 0),
          PointMap.get(m, x - 1 | 0, y + 1 | 0)
        ];
}

function getDiamond(m, x, y) {
  return /* array */[
          PointMap.get(m, x, y - 1 | 0),
          PointMap.get(m, x + 1 | 0, y),
          PointMap.get(m, x, y + 1 | 0),
          PointMap.get(m, x - 1 | 0, y)
        ];
}

function average(values) {
  var valid = values.filter(Option.isSome);
  var total = values.reduce(function (acc, x) {
        if (x) {
          return acc + x[0];
        } else {
          return acc;
        }
      }, 0);
  var len = valid.length;
  return total / len;
}

function refine(terrain, roughness) {
  var t = create(terrain[/* detail */0] + 1 | 0);
  PointMap.iter(terrain[/* map */3], function (x, y, v) {
        return PointMap.set(t[/* map */3], (x << 1), (y << 1), 2 * v);
      });
  PointMap.iter(t[/* map */3], function (x, y, _) {
        if (needsSquare(x, y)) {
          var avg = average(getSquare(t[/* map */3], x, y));
          var offset = (Math.random() - 0.5) * roughness;
          return PointMap.set(t[/* map */3], x, y, avg + offset);
        } else {
          return 0;
        }
      });
  PointMap.iter(t[/* map */3], function (x, y, _) {
        if (needsDiamond(x, y)) {
          var avg = average(getDiamond(t[/* map */3], x, y));
          var offset = (Math.random() - 0.5) * roughness;
          return PointMap.set(t[/* map */3], x, y, avg + offset);
        } else {
          return 0;
        }
      });
  return t;
}

function draw(terrain, context, width, height) {
  var waterVal = terrain[/* size */1] * 0.1;
  var map = terrain[/* map */3];
  var max = terrain[/* max */2];
  var size = terrain[/* size */1];
  var rect = function (context, a, b, style) {
    if (b[/* y */1] < a[/* y */1]) {
      return /* () */0;
    } else {
      context.fillStyle = style;
      context.fillRect(a[/* x */0], a[/* y */1], b[/* x */0] - a[/* x */0], b[/* y */1] - a[/* y */1]);
      return /* () */0;
    }
  };
  var brightness = function (x, y, slope) {
    if (y === max || x === max) {
      return "#000";
    } else {
      var b = (slope * 50 | 0) + 128 | 0;
      return "rgba(" + (String(b) + ("," + (String(b) + ("," + (String(b) + ",1)")))));
    }
  };
  var iso = function (x, y) {
    return /* float array */[
            0.5 * ((size + x | 0) - y | 0),
            0.5 * (x + y | 0)
          ];
  };
  var project = function (flatX, flatY, flatZ) {
    var point = iso(flatX, flatY);
    var x0 = width * 0.5;
    var y0 = height * 0.2;
    var z = size * 0.5 - flatZ + point[/* y */1] * 0.75;
    var x = (point[/* x */0] - size * 0.5) * 6;
    var y = (size - point[/* y */1]) * 0.005 + 1;
    return /* float array */[
            x0 + x / y,
            y0 + z / y
          ];
  };
  var someOrZero = function (param) {
    if (param) {
      return param[0];
    } else {
      return 0;
    }
  };
  return PointMap.iter(map, function (x, y, v) {
              var v$prime = someOrZero(PointMap.get(map, x + 1 | 0, y));
              var top = project(x, y, v);
              var bottom = project(x + 1 | 0, y, 0);
              var water = project(x, y, waterVal);
              var style = brightness(x, y, v$prime - v);
              rect(context, top, bottom, style);
              return rect(context, water, bottom, "rgba(50, 150, 200, 0.15)");
            });
}

exports.create       = create;
exports.needsSquare  = needsSquare;
exports.needsDiamond = needsDiamond;
exports.getSquare    = getSquare;
exports.getDiamond   = getDiamond;
exports.average      = average;
exports.refine       = refine;
exports.draw         = draw;
/* No side effect */
