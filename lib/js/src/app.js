// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array      = require("bs-platform/lib/js/array.js");
var Curry        = require("bs-platform/lib/js/curry.js");
var Option       = require("./option.js");
var Random       = require("bs-platform/lib/js/random.js");
var Caml_array   = require("bs-platform/lib/js/caml_array.js");
var DocumentRe   = require("bs-webapi/lib/js/src/dom/nodes/documentRe.js");
var Pervasives   = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var state = /* record */[
  /* particles : array */[],
  /* window : record */[
    /* width */0,
    /* height */0
  ]
];

var width = window.innerWidth;

var height = window.innerHeight;

state[/* window */1][/* width */0] = width;

state[/* window */1][/* height */1] = height;

var canvas = document.createElement("canvas");

var ctx = canvas.getContext("2d");

Option.map(function (param) {
      param.appendChild(canvas);
      return /* () */0;
    }, Option.andThen(function (prim) {
          return Js_primitive.null_to_opt(prim.body);
        }, DocumentRe.asHtmlDocument(document)));

canvas.setAttribute("height", Pervasives.string_of_int(height));

canvas.setAttribute("width", Pervasives.string_of_int(width));

function genItems(num, callback) {
  var emptyArray = Caml_array.caml_make_vect(num, 0);
  return $$Array.map(Curry.__1(callback), emptyArray);
}

function addParticles(num, callback) {
  var newParticles = genItems(num, callback);
  state[/* particles */0] = $$Array.append(state[/* particles */0], newParticles);
  return /* () */0;
}

function integrateParticle(p) {
  var velocityX = (p[/* pos */0][/* x */0] - p[/* oldPos */1][/* x */0]) * 0.999;
  var velocityY = (p[/* pos */0][/* y */1] - p[/* oldPos */1][/* y */1]) * 0.999;
  p[/* oldPos */1][/* x */0] = p[/* pos */0][/* x */0];
  p[/* oldPos */1][/* y */1] = p[/* pos */0][/* y */1];
  p[/* pos */0][/* x */0] = p[/* pos */0][/* x */0] + velocityX;
  p[/* pos */0][/* y */1] = p[/* pos */0][/* y */1] + velocityY;
  return /* () */0;
}

function getVelocity(p) {
  return /* float array */[
          p[/* pos */0][/* x */0] - p[/* oldPos */1][/* x */0],
          p[/* pos */0][/* y */1] - p[/* oldPos */1][/* y */1]
        ];
}

function move(p, x, y) {
  p[/* pos */0][/* x */0] = p[/* pos */0][/* x */0] + x;
  p[/* pos */0][/* y */1] = p[/* pos */0][/* y */1] + y;
  return /* () */0;
}

function bounce(p) {
  if (p[/* pos */0][/* y */1] > height) {
    var velocity = getVelocity(p);
    p[/* oldPos */1][/* y */1] = height;
    p[/* pos */0][/* y */1] = p[/* oldPos */1][/* y */1] - velocity[/* vY */1] * 0.3;
  }
  return /* () */0;
}

function updateParticle(p) {
  move(p, 0, 0.3);
  integrateParticle(p);
  bounce(p);
  return /* () */0;
}

function update(state) {
  if (state[/* particles */0].length < 4000) {
    addParticles(10, function () {
          var x = width * 0.5;
          var y = height;
          var p_000 = /* pos : float array */[
            x,
            y
          ];
          var p_001 = /* oldPos : float array */[
            x,
            y
          ];
          var p = /* record */[
            p_000,
            p_001
          ];
          move(p, Random.$$float(4) - 2, Random.$$float(-10) - 15);
          return p;
        });
  }
  return $$Array.iter(updateParticle, state[/* particles */0]);
}

function drawBackground(color, width, height) {
  ctx.fillStyle = color;
  ctx.fillRect(0, 0, width, height);
  return /* () */0;
}

function drawParticle(p) {
  ctx.strokeStyle = "#0099ff";
  ctx.lineWidth = 3;
  ctx.beginPath();
  ctx.moveTo(p[/* oldPos */1][/* x */0] | 0, p[/* oldPos */1][/* y */1] | 0);
  ctx.lineTo(p[/* pos */0][/* x */0] | 0, p[/* pos */0][/* y */1] | 0);
  ctx.stroke();
  return /* () */0;
}

function draw(state) {
  drawBackground("#000000", width, height);
  return $$Array.iter(drawParticle, state[/* particles */0]);
}

function loop() {
  update(state);
  draw(state);
  requestAnimationFrame(loop);
  return /* () */0;
}

loop(/* () */0);

var maxParticles = 4000;

var newParticlesPerFrame = 10;

var damping = 0.999;

var gravity = 0.3;

exports.maxParticles         = maxParticles;
exports.newParticlesPerFrame = newParticlesPerFrame;
exports.damping              = damping;
exports.gravity              = gravity;
exports.state                = state;
exports.width                = width;
exports.height               = height;
exports.canvas               = canvas;
exports.ctx                  = ctx;
exports.genItems             = genItems;
exports.addParticles         = addParticles;
exports.integrateParticle    = integrateParticle;
exports.getVelocity          = getVelocity;
exports.move                 = move;
exports.bounce               = bounce;
exports.updateParticle       = updateParticle;
exports.update               = update;
exports.drawBackground       = drawBackground;
exports.drawParticle         = drawParticle;
exports.draw                 = draw;
exports.loop                 = loop;
/* width Not a pure module */
